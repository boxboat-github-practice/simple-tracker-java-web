/*
 * Simple emlpoyee contract tracker api
 * This API allows management of client contracts and tracks history of employee contract assignments 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boxboat.simpletracker.api;

import com.boxboat.simpletracker.api.ApiException;
import com.boxboat.simpletracker.model.Client;
import com.boxboat.simpletracker.model.ClientsPostRequest;
import com.boxboat.simpletracker.model.Contract;
import com.boxboat.simpletracker.model.ContractPatch;
import com.boxboat.simpletracker.model.Employee;
import com.boxboat.simpletracker.model.EmployeesPostRequest;
import com.boxboat.simpletracker.model.History;
import com.boxboat.simpletracker.model.HistoryPatch;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Delete a client by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientsClientIdDeleteTest() throws ApiException {
        Integer clientId = null;
        api.clientsClientIdDelete(clientId);
        // TODO: test validations
    }

    /**
     * Get a client by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientsClientIdGetTest() throws ApiException {
        Integer clientId = null;
        Client response = api.clientsClientIdGet(clientId);
        // TODO: test validations
    }

    /**
     * Update a client by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientsClientIdPutTest() throws ApiException {
        Integer clientId = null;
        ClientsPostRequest clientsPostRequest = null;
        Client response = api.clientsClientIdPut(clientId, clientsPostRequest);
        // TODO: test validations
    }

    /**
     * Get all clients
     *
     * Retrieves all clients
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientsGetTest() throws ApiException {
        List<Client> response = api.clientsGet();
        // TODO: test validations
    }

    /**
     * Create new client
     *
     * Add a new client with given name and url
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientsPostTest() throws ApiException {
        ClientsPostRequest clientsPostRequest = null;
        Client response = api.clientsPost(clientsPostRequest);
        // TODO: test validations
    }

    /**
     * Delete a contract by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractsContractIdDeleteTest() throws ApiException {
        Integer contractId = null;
        api.contractsContractIdDelete(contractId);
        // TODO: test validations
    }

    /**
     * Get a contract by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractsContractIdGetTest() throws ApiException {
        Integer contractId = null;
        Contract response = api.contractsContractIdGet(contractId);
        // TODO: test validations
    }

    /**
     * Update a contract by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractsContractIdPutTest() throws ApiException {
        Integer contractId = null;
        ContractPatch contractPatch = null;
        Contract response = api.contractsContractIdPut(contractId, contractPatch);
        // TODO: test validations
    }

    /**
     * Get all contracts
     *
     * Retrieves all contracts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractsGetTest() throws ApiException {
        List<Contract> response = api.contractsGet();
        // TODO: test validations
    }

    /**
     * Create new contract
     *
     * Add a new contract with fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractsPostTest() throws ApiException {
        ContractPatch contractPatch = null;
        Contract response = api.contractsPost(contractPatch);
        // TODO: test validations
    }

    /**
     * Delete an employee by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesEmployeeIdDeleteTest() throws ApiException {
        Integer employeeId = null;
        api.employeesEmployeeIdDelete(employeeId);
        // TODO: test validations
    }

    /**
     * Get an employee by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesEmployeeIdGetTest() throws ApiException {
        Integer employeeId = null;
        Employee response = api.employeesEmployeeIdGet(employeeId);
        // TODO: test validations
    }

    /**
     * Update an employee by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesEmployeeIdPutTest() throws ApiException {
        Integer employeeId = null;
        EmployeesPostRequest employeesPostRequest = null;
        Employee response = api.employeesEmployeeIdPut(employeeId, employeesPostRequest);
        // TODO: test validations
    }

    /**
     * Get all employees
     *
     * Retrieves all employees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesGetTest() throws ApiException {
        List<Employee> response = api.employeesGet();
        // TODO: test validations
    }

    /**
     * Create new employee
     *
     * Add a new employee with given name and github username
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesPostTest() throws ApiException {
        EmployeesPostRequest employeesPostRequest = null;
        Employee response = api.employeesPost(employeesPostRequest);
        // TODO: test validations
    }

    /**
     * Get all history
     *
     * Retrieves all employee contract assignment history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void historyGetTest() throws ApiException {
        Integer employeeId = null;
        Integer clientId = null;
        Integer contractId = null;
        List<History> response = api.historyGet(employeeId, clientId, contractId);
        // TODO: test validations
    }

    /**
     * Delete an employee contract assignment by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void historyHistoryIdDeleteTest() throws ApiException {
        Integer historyId = null;
        api.historyHistoryIdDelete(historyId);
        // TODO: test validations
    }

    /**
     * Get an employee contract asignment by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void historyHistoryIdGetTest() throws ApiException {
        Integer historyId = null;
        History response = api.historyHistoryIdGet(historyId);
        // TODO: test validations
    }

    /**
     * Update an employee contract assignment by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void historyHistoryIdPutTest() throws ApiException {
        Integer historyId = null;
        HistoryPatch historyPatch = null;
        Contract response = api.historyHistoryIdPut(historyId, historyPatch);
        // TODO: test validations
    }

    /**
     * Create new employee contract assignment
     *
     * Add a new contract assignment with fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void historyPostTest() throws ApiException {
        HistoryPatch historyPatch = null;
        History response = api.historyPost(historyPatch);
        // TODO: test validations
    }

}
